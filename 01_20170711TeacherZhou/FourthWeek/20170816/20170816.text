一.定时器
    1.定时器概念
        定时器可以分为两个阶段:
            1.第一阶段: 设置一个定时器(有两种方式setInterval,setTimeout),然后再设置一个等待时间(interval时间因子),接下来等待即可;
            2.第二阶段: 当到达等到的时间后,执行定时器规划的任务(设置定时器,第一个参数传递的函数,就是规划的任务);

    2.定时器setInterval
        1.定时器里的this是window;
            setInterval(function () {
                //->setInterval: 当到达这个时间(1000)之后,执行这个任务
                //->this: window
            },1000);
        2.用bind改this;
            //->用bind解决需求(注意: IE678下不兼容)
            //->需求: 把定时器里的this改成obj;
                var obj = {name: "zhufeng"};
                setInterval(function () {
                    //->this: obj
                    //console.log(this);
                    //->当前函数没有返回值,是undefined
                }.bind(obj),1000);//->bind: 预先把函数中的this修改成obj,当定时器到达指定的时间后,执行这个函数,this也就是obj了(IE678下不兼容)

    3.定时器setTimeout
        1.定时器里的this也是window;
            setTimeout(function () {
                //->this: window
                console.log(this);
            },1000);
        2.也是用bind改this;
            var obj = {name: "zhufeng"};
            setTimeout(function () {
                //->this: obj
                //console.log(this);
                //->当前函数没有返回值,是undefined
            }.bind(obj),1000);

    4.定时器返回值
        定时器的返回值是是一个数字(从数字1开始,到(1+),代表当前定时器是页面中的第几个定时器;(按照去银行办业务领取的排队号理解)

    5.清除定时器
        clearInterval/clearTimeout([NUM]): 通过定时器的排队号清除指定的定时器,而且不管用哪个定时器设置的,任意一个清除方法,只要把排队号指定好,都可以把定时器清除掉,比如: 用setInterval设置的的定时器,使用clearTimeout也可以把其清除掉(不推荐这样用);

二.同步和异步编程(JS中大部分操作都是同步编程)
    概念: 每当执行一句或者一段JS代码,其实都是在完成一个任务(任务执行分为两种模式:1.自上而下;2.上面任务没完成,先一个任务也可以接着做;)

    1.同步编程: 上一个任务没有完成,下一个任务不能执行(可以理解为: 任务是自上而下逐一执行的);
    2.异步编程: 上一个任务没有彻底完成(完成一半),下一个任务先去执行,等把下面的任务完成后,才会返回头执行上面没有彻底完成的任务;

    3.JS是单线程的编程语言: 它脑子里只有一根弦,一次只能处理一件事;
    4.JS中大部分操作都是同步编程;

三.同步案例和异步编程案例

    1.同步编程案例
        //->能打印"No"?: 条件恒成立,死循环,不能打印"No";
        //->当前这个while循环是死循环,当前这件任务永远无法完成,而循环的操作是同步编程(这件事完不成,以后的事都无法完成)
            var n = 1;
            while (n === 1){
                console.log("Ok");
            }
            console.log("No");//->这个"No"永远不会被打印;如果"No"下有其他代码,其他代码也不会执行

    2.异步编程案例
        1.定时器
            1.案例一: 定时器时间是1s(1000)
            //->打印顺序: 先打印12,后打印13;原理如下:
                /*
                * 这个定时器的任务: 设置一个定时器,1s后执行匿名函数;
                * //->这个定时器如果按照同步理解: 首先设置一个定时器,然后等待,此时什么都不能做,1s后把函数执行,才能执行其他的任务;(这是错误的,这个定时器不是按照同步理解的;是按照异步理解);
                * //->这个定时器是按照异步理解: 首先设置定时器,但我们不会去等待到时间再去做其他事情,在这个阶段我们首先会把下面的任务逐一去完成,当下面任务完成后,我们再返回头看定时器的等待时间是否到达,到达则执行匿名函数,如果没到继续等待;(这个才是定时器的正确的理解思想);
                *
                * */
                var n = 12;
                setInterval(function () {
                    n++;
                    //console.log(n);//->2.再打印13;
                },1000);
                console.log(n);//->1.先打印12;

            2.案例二: 定时器时间是0s(0),不是立马执行;
            //->定时器的时间因子设置为零,也不是立马执行,每一个浏览器都有一个最小的反应时间(预估测试值: google最小的反应时间是5-6ms IE最小反应时间是10-13ms,一般设置最小值设置为17ms"性能会更好一些";有很多类库的定时器时间都写的17,也有部分用的13;),当我们设置的时间小于这个值,浏览器也是按照最小的时间处理的 =>也就是说,设置一个定时器,怎么着也要等一会执行,此时不等,继续执行下面的任务...
                 var n = 12;
                 setTimeout(function () {
                     n++;
                     //console.log(n);//->2.再打印13;
                 },0);//->因为浏览器有最小反应时间,既是设置为0,也不起作用;(不同的浏览器,最小的反应时间不同;具体如上为你做解释;)
                     console.log(n);//->1.先打印12;

            3.案例三: 测试浏览器的最小反应时间
                var n = 12;
                var sTime = new Date();
                setTimeout(function () {
                    var endTime = new Date();
                    console.log(endTime - sTime);//->测试浏览器的最小反应时间
                    console.log(++n);
                },0);

            4.案例四: 定时器到达时间不一定执行
            //->通过这个例子说明一个问题: 我们给定时器设置一个时间,到达时间定时器不一定执行;(因为设置一个定时器不等;它继续执行下面的任务);设置一个定时器,总要等一段时间再执行,此阶段我们不等,继续执行下面的任务,但是由于JS的单线程的,一次只能处理一件事情,下面的任务没完成,不管定时器是否到达设定的时间,也要把下面任务完成后,才能反回头执行定时器里面的内容;
                var n = 12;
                setTimeout(function () {
                    console.log(++n);//->2.再打印13;
                },0);
                for (var i = 0; i < 100000000; i++) { }
                console.log(n);//->1.先打印12;

            5.案例五: 死循环的案例
            //->一次都不会输出;
                var n = 12;
                setTimeout(function () {
                    console.log(++n);
                },0);
                while(1===1){ }
                console.log(n);

            6.案例六: 设置多个定时器
            //->概念: 这个案例说明一个问题: 当同步的任务彻底完成后,开始返回头看之前设置的定时器是否到时间,到时间的给予执行;如果有好几个定时器都到时间了,会把最先达到时间的定时器先执行(因为在设置定时器的时候,浏览器会把用时最短的定时器优先排在队列的前面);
                打印顺序: 2  1  3;
                setTimeout(function () {
                    console.log(1);
                },100);//->2.第二次打印1;

                setTimeout(function () {
                    console.log(2);
                },0);//->1.先打印2;

                var st = new Date();
                for (var i = 0; i < 100000000; i++) {
                    console.log(new Date() - st);//->反应时间的计算
                }
                setTimeout(function () {
                    console.log(3);
                },10);//->3.第三次打印3;

        2.事件绑定
            1.案例一: 所有的事件绑定都是异步编程
                var n = 12;
                document.body.onclick = function () {
                    console.log(++n);//->打印顺序,第二次打印: 13
                };
                console.log(n);//->打印顺序,第一次打印: 12

            2.案例二: 验证事件绑定也是异步编程
                var oImg = new Image;
                oImg.src= "http://imgsrc.baidu.com/imgad/pic/item/267f9e2f07082838b5168c32b299a9014c08f1f9.jpg";
                oImg.onload =function () {
                   console.log("图片加载成功");
                };
                oImg.onerror = function () {
                   console.log("图片加载失败");//->打印顺序,第二次打印: "图片加载失败"
                };
                console.log("当前图片加载中,客官请稍等...");//->打印顺序,第一次打印: "当前图片加载中,客官请稍等..."

        3.AJAX
            1.AJAX可以开启异步编程;
            2.AJAX有同步,也有异步;

            备注: 异步编程只有以上3个(定时器,事件绑定,AJAX);

四.setInterval && setTimeout
    1.定时器setInterval和定时器setTimeout的区别:
        1.setTimeout: 到达指定时间执行一次函数,执行完成后,当前的定时器就没有了;
        2.setInterval: 到达指定的时间先把函数执行一次,但是此时定时器并米有失去它的作用,以后每间隔这么长的时间,当前的函数都会重新执行一次,"除非手动清除当前的定时器";

    2.setInterval案例
        案例: 定时器的计数功能
            var n = 0;
            var timer = setInterval(function () {
                n++;
                console.log(n);
                if(n>=5){
                    clearInterval(timer);
                }
            },1000);

        案例: 刚开始进来就输入1
            打印1  2  3  4  5
            var n = 0;
            function fn() {
                    n++;
                    console.log(n);
                    if(n>=5){
                        clearInterval(timer);
                    }
            }
            fn();
            var timer = setInterval(fn,1000);

        案例: 用setTimeout实现上述功能: 不成功;
            var n = 0;
            function fn() {
                n++;
                console.log(n);
                if(n>=5){
                    clearInterval(timer);
                }
            }
            fn();
            var timer = setTimeout(fn,1000);//->setTimeout只能执行一次  打印1  2;


        案例: setTimeout 模拟出setInterval的效果方法,用递归实现需求;
            递归: 函数执行的时候,再调用自己执行;
            var n = 0,
                timer = null;
            function fn() {
                n++;
                console.log(n);
                if(n>=5){
                    clearInterval(timer);
                    return;
                }
                //->arguments.callee: 当前函数本身(JS严格模式下不允许使用,所以真正项目中我们基本不使用这个属性)
                //timer = setTimeout(arguments.callee,1000);//->arguments.callee和fn一样;但别试用;因为arguments.callee在严格模式下不兼容,不允许使用;

                timer = setTimeout(fn,1000);//->每隔1s钟,执行fn,这叫递归;   arguments.callee和fn一样;但别试用;因为arguments.callee在严格模式下不兼容,不允许使用;
            }
            fn();
            //->总结: 想实现这个需求,还是用setInterval简单;setTimeout在这个案例中,麻烦;
            //->总结: 在这个案例中,设置了4个定时器;条件判断中(n>=5)大于等于5的时候,就return不创建了;


        案例: setTimeout 模拟出setInterval的效果方法,用递归实现需求;
            优化: 解决定时器占内存的问题,提高性能
            var n = 0,
                timer = null;
            function fn() {
                //->执行fn的时候,上一次常见的那个定时器已经没用了,为了节约内存的性能,我们最好把没有的这个没用的定时器给清除掉;
                clearTimeout(timer);//->清除上一次设置的定时器
                //->第一次执行fn,timer是null,清除null没用,也不会报错;什么也不清除;
                //->第一次执行fn之后,设置了定时器,第二次执行fn,先清除第一次设置的定时器...
                //->第二次执行fn之后,又设置了定时器,第三次执行fn,又清除第二次设置的定时器...
                //->第三次执行fn之后,又设置了定时器,第四次执行fn,又清除第三次设置的定时器...
                //->第四次执行fn之后,又设置了定时器,第五次执行fn,又清除第四次设置的定时器...所以,在if条件判断中,不用再清除定时器;
                n++;
                console.log(n);
                if (n >= 5) {
                    //->所以,在if条件判断中,不用再清除定时器;'
                    return;
                }
                //->设置定时器
                timer = setTimeout(fn, 1000);
            }
            fn();














        案例二: 事件绑定









        案例一: AJAX



































































