banner实现的步骤
1.分析左右运动轮播图实现的原理

2.编写HTML结构和CSS样式

3.实现JS
    1.搭建单利模式
        var bannerRender = (function(){

            return{
                init: function(){

                }
            }
        })();
        bannerRender.init();

    2.想要操作哪些元素就先把这些元素获取到;暂时没有内容的元素,预留变量即可;

    3.编写一个方法queryData获取数据

    4.编写一个方法bindData绑定数据
        1.首先把imgBox和focus中需要的字符串拼接好,放到容器中;
        2.把之前没有获取的数据,重新获取一遍;(比如imgBoxList/imgList/focusList)
        3.设置imgBox的宽度,以及记录当前有多少个li(maxNum)
    5.编写一个lazyImg方法,实现图片延迟加载;

    6.编写一个initLoad的方法,实现当页面加载完成后(window.onLoad),展示第一张图片以及让第一个焦点li有选中的样式;

第一阶段汇总: 在init方法中,把上面做的方法执行

    init: function(){
        queryData();
        bindData();
        initLoad();
    }

    7.设置step/interval/autoTimer三个后续需要的变量

    8.编写changeImg方法,实现图片的切换
        1.让当前元素imgBox在300ms内的left运动到step对应的位置(-step*1000);
        2.加载step对应这个li中的真实图片
        3.焦点对齐
    9.编写autoMove方法实现每间隔interval这么长的时间自动切换下一张
        1.我们需要分析如何实现无缝滚动了
        2.修改bindData方法: 在计算imgBox宽度之前,把第一张克隆一份插入到容器的末尾
        3.在autoMove定时器到达时间执行之前,判断上一次是否应运动到克隆的最后一张了(step===maxNum-1),如果条件成立,让imgBox立即运动到真实第一张的位置(left=0),让step=0
        4.继续step++
        5.继续执行changeImg实现图片的切换
        6.修改changeImg方法中焦点对齐这一部分的代码(因为当前imgBox区域的step出现的值会比真实的focus中li的最大索引多一个)

第二阶段汇总: 在init中执行autoMove
    init: function(){
        ...

        autoMove();
    }

    10.实现一个方法bindMouseEvent: 鼠标进入和离开的时候控制按钮的显示隐藏以及自动轮播的暂停和开启

    11.实现一个方法bindFocusEvent: 点击焦点切换

    12.实现一个方法bindArrowEvent: 点击左右按钮切换
        1.右按钮和自动轮播一致
        2.左按钮无缝衔接需要单独再处理

第三阶段汇总: 在init中执行
    init: function(){
        ...

        bindMouseEvent();
        bindFocusEvent();
        bindArrowEvent();
    }