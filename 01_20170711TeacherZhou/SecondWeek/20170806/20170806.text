一.DOM的映射机制
    1.在JS中获取的DOM元素或者元素集合,和HTML页面上的元素标签是存在"映射关系"的;
        1.JS中把DOM元素进行修改,页面中的元素样式也会跟着改变;
        2.页面中元素的结构发生改变,JS中的DOM元素也会跟着改变;

        源码范例:
        var stuList = document.getElementById("stuList"),
            stuBody = stuList.tBodies[0],
            stuRows = stuBody.rows;
            //->开始的时候页面中没有tr,所以stuRows是一个空的类数组;

        ~function () {
            //->1.getData获取数据
            ....

            //->bindData绑定数据
            var str = ``;
            ....
            stuBody.innerHTML = str;//->向页面中增加了20个tr
            console.log(stuRows);//->页面中tBody结构中的内容改变了,根据DOM的映射机制,此处不需要重新的获取,stuRows中存储的就是最新的20条数据;
        }();
二.sortTable案例
    考试时可以借用的文件:
        1.reset.min.css
        2.data.json
三.学习方法
    1.基础知识,一周三次过笔记
    2.所有课堂综合案例,理清思路,详细中文注释(伪代码)编写代码;
四.正则(只能处理字符串;不能处理对象...等其它)
    1.用来处理"字符串"的规则
        1.验证当前的字符串是否符合规则 - 匹配;
        2.把字符串中符合规则的字符捕获奥 - 捕获;
    2.正则匹配: [正则].test([字符串]);
    3.正则捕获: [正则].exec([字符串]);
        或者: [字符串].match([正则]);
        或者: [字符串].replace([正则],function....);
        或者: [字符串].split([正则]);
        或者....很多;
五.元字符/修饰符/正则的创建方式
    1.正则的创建方式
        1.字面量创建方式
            var reg = /^\d+$/g;
        2.实例(构造函数)创建方式
            var reg = new RegExp("[元字符]","[修饰符]");

        一个正则就是由元字符和修饰符组成的;
        想要学会编写自己所需的规则;
        需要牢牢掌握元字符和修饰符;

    2.正则的修饰符(img)
        1.i(ignoreCase): 忽略大小写匹配;
        2.m(multiline): 多行匹配;
        3.g(global): 全局匹配;
        4.修饰符在正则中放置的位置
            1.修饰符放在最后一个斜杠的后面
                var reg = /^\d+$/img;
            2.实例创建方式中,修饰符放在第二个实参字符串中;第一个实参字符串放的是元字符;
                var reg = new RegExp("元字符","img");

    3.正则的元字符
        //->两个斜杠中间包起来的都是正则的元字符;教材第三页"元字符列表",背吧!!!常用的元字符(一二十个)
        元字符分类:
            1.特殊元字符:
            2.量词元字符
            3.普通元字符

        1.特殊元字符: 有特殊含义的
            1.\: 转义字符;就是把普通元字符转换为特殊的意义或者把特殊元字符转换为普通的意义;
                例如: /\d/ d本身就是一个字母,前面加一个转义字符,代表0-9之间的一个数字;
                    或者/\./ 点在正则中代表任意字符(特殊含义),此处加上转义字符,代表的就是本身意思点了;
            2.^(caret): 以某一个元字符开始;
                例如: /^1/ 代表当前字符串应该是以1开始的;
            3.$(dollar): 以某一个元字符结束;
                例如: /2$/ 代表当前字符串最后一个字符应该是以2结尾;
            4.\d: 代表一个(0-9)之间的数字;
            5.\D: 和\d正好相反,代表一个(非0-9)之间的任意字符;(大写字母都和小写字母的是相反的)
            6.\w: 数字,字母,下划线三者中的任意一个;
            7.\n: 匹配一个换行符;
            8.\b: 匹配一个边界;
            9.\s: 匹配一个空白字符
            10..(点): 除了\n以外的任意一个字符
            11.x|y: x或者y中的一个字符
            12.(): 分组;
            13.[a-z]: 匹配一个a-z中的任意字符;/[0-9]/ 0-9之间的任何一个数字,等价于\d;
            14.[^a-z]: 除了a-z以外的任意一个字符,这里是^是取反的意思;
            15.[xyz]: x或者y或者z,三者中的一个;
            16.[^xyz]: 除了三者以外的任意一个字符
            17.?=(问号等号): 正想预查
            18.?!(问号叹号): 负向预查
            19.?:(问号冒号): 只匹配不捕获;

        2.量词元字符: 代表出现多少次
            20.*(星号): 前面的元字符出现零次到多次;
            21.+(加号): 前面的元字符出现一次到多次;
            22.?(问号): 前面的元字符出现零次或者一次;
            23.{n}: 出现n次;
            24.{n,}: 出现n到多次;
            25.{n,m}: 出现n到m次;

        3.普通元字符: 代表本身含义的
            26.
            27.
            28.
            29.
            30.
            31.
            32.
            33.
            34.




