一.数组
    var ary = [12,"哈哈",true,null,undefined,{},function(){}];
    ->数组中每一项的值可以是任何数据类型的;
    ->数组的创建有两种方式:
        1.字面量方式
            var ary = [];
            var ary = [12,23];

        2.示例创建方式
            var ary = new Array();
            ->如果是new Array(n): 创建一个length长度为N的数组,数组中的每一项是undefined;
            ->如果是new Array(非数字) 或者new Array(放两项及两项以上的任何数据类型): 也就是创建一个数组,并且把括号中的内容当作数组的每一项存储起来;
    ->数组隶属于对象数据类型的
        typeof [] -> "object"

    ->数组也是由属性名和属性值组成的,每一项的值是它的属性值,它的属性名是数字索引,索引从零开始,length属性存储的是它的长度;

    var ary = [12,23,34];//这种数组叫一维数组;  想获取23,ary[1];
    var ary = [12,[23,34]];//想获取23,  ary[1][0];   这种数组叫二维数组;
    var ary = [12,[23,[34]]];//这种数组叫三维数组(多维数组);想获取343,  ary[1][1][0];

二.数组中常用的一些方法
    console.log(Array.prototype);数组中提供的所有方法在这都可以看到;

    A: 方法名及方法所代表的含义;
    B: 参数;
    C: 返回值;
    D: 操作该方法,原来的数组是否发生了改变;

    1.数组的增.删.改
        1.push(): 向数组末尾追加新项;
            参数: 1-N个(代表新增加的内容-任何数据类型);
            返回值: 新增后数组的最新长度;
            原有数组是否改变: 变;

            ary[ary.length] = xxx; =>向数组末尾追加一项新的内容,但是这种方式属于对象键值对的操作;

            ary.splice(ary.length,0,"x")
        2.unshift(): 向数组开头插入新项;
            参数: 1-N个(代表新增加的内容-任何数据类型);
            返回值: 新增后数组的最新长度;
            原有数组是否改变: 变;
            unshift的原理: 1.先把数组倒过来,2.向末尾增加一项;3.再把数组倒回去;
            原生js实现unshift太麻烦;

            ary.splice(0,0,"x")
        3.shift(): 删除数组第一项;
            参数: 无
            返回值: 被删除这一项的内容;
            原有数组是否改变: 变;

            ary.splice(0,1)
        4.pop(): 删除数组最后一项;
            参数: 无;
            返回值: 被删除这一项的内容;
            原有数组是否改变: 变;

            ary.length--: 删除数组最后一项;

            ary.splice(ary.length-1)
        5.splice():
            splice(n,m): 从索引n开始,删除(m个)元素;(返回)的结果是一个(新的数组),数组中包含被删除的那些内容,原来数组会发生改变;
            splice(n): 从索引n开始,删除到(末尾);
            splice(0): 清空数组;原有的内容(被删除的)会以一个新数组返回 =>数组的克隆(这种方式不太好,虽然复制过来,但原有数组没了);
            splice(n,m,x): 从索引n开始,删除(m个)元素,把删除的部分,用(x)代替(替换);返回的结果依然是被删除的内容(放在新数组中),原来的数组改变;
            splice(n,0,x): 把x(插入)到索引(n之前);
    2.数组的查询
        6.1.slice(n,m): 从索引n开始找到(索引m处(不包含m)),把找到的部分以一个新数组返回,原来的数组不变;
        6.2.slice(n): 从索引n开始找到末尾;
        6.3.slice(0): 数组的克隆,把原有数组克隆一份一模一样的新数组出来;等价于slice();
            支持负值的索引slice(-4,-1) 和字符串的相同,用总长度加负数索引获取到正数,然后按照正数索引去查找;例如:var ary =[12,23,34,45,56];ary.slice(-4,-1);//(3) [23, 34, 45]
            var ary1 = [12,23];
            var ary2 = ary1.slice(0);//->克隆的意义在于内容相同,但是隶属于不同的内容空间,属于两个独立的个体;
            ary2 ->[12,23];
            ary1 == ary2 ->false    是不同的空间地址;
        7.concat(数组/数字): 把两个或者多个数组进行拼接,最终合并成一个数组;原来数组不变;
    3.数组转换字符串
        8.toString(): 把数组转换为字符串;原有数组不变;数组中的每一项用逗号隔开;
        9.join(字符): 把数组中的每一项按照指定字符拼接成字符串;原有数组不变;和字符串中的split对应;
    4.数组的排序和排列
        10.reverse(): 把数组倒过来排列,原有数组改变;返回值: 倒过来排列的数组;
        11.sort(): 把数组进行排序;(可以按照升序,也可以按照降序);
            var ary = [1,3,2,4];
            ary.sort();//[1,2,3,4]
            ary.sort(function(a,b){
                return a-b;//升序  [1,2,3,4]
                return b-a;//降序   [4,3,2,1]
            })

            ary = [12,14,24,4];
            ary.sort();//[12,14,24,4]  在传递参数的情况下,我们的sort方法只适用于十位数以下的数字,处理十位数以上的数字,需要传递function方法;

    ================================后面讲的方法在ie6-8下不兼容
        12/13.indexOf/lastIndexOf: 和字符串相同,获取当前项在数组中第一次/最后一次出现位置的索引;如果数组中没有这个项,返回-1;(在不考虑兼容的情况下,可以根据这个规律验证数组当中是否包含某项);

        14.forEach(): 循环数组中的每一项;
        15.map(): 循环数组中的每一项,相对于forEach()来讲,map可以把每一项的值进行修改;


        var ary = [12,23,34,45];
        ary.forEach(function(item,index){
            //item: 当前循环这一项的内容;
            //index: 当前循环这一项的索引;
        });





        数组方法总结:
        1.push
        2.pop
        3.shift
        4.unshift
        5.splice       splice(n,m)     splice(n)     splice(0)      splice(n,m,x)     splice(n,0,x)
        6.slice
        7.concat
        8.toString
        9.join
        10.reverse
        11.sort
        12.indexOf
        13.lastIndexOf
        14.forEach
        15.map

二.算法
    目的: 开阔思维;


    1.数组去重




    2.递归





    3.冒泡






    4.快速






    5.插入
















        算法总结:
        1.去重
        2.递归
        3.冒泡
        4.插入
        5.快速









