AJAX && NODE全栈开发
    1.什么是全栈开发?
        Full Stack developer(全栈开发): 前端和后端程序都是我们来开发的,这叫全栈开发;并且所使用的技术语言前后端基本一致;
        又会后台又会前端,那个叫全站...;所使用的语言不一致!

        全栈开发语言: 主流
        java: 后台使用java来编写,前端除了使用js做各种效果,数据交互统一采用jsp技术来实现;
        php: 前后台都是使用php开发的,对于前端来说,数据交互依然采用的是php,只不过样式和效果还是css和js;

        新的语言
        ruby,python,asp.net,也都是全栈开发语言;

        php开源框架(thinkphp): ThinkPHP底层运行的内存消耗极低，而本身的文件大小也是轻量级的，因此不会出现空间和内存占用的瓶颈。
        参考: http://document.thinkphp.cn/manual_3_2.html

        javascript: 目前也可以做全栈开发,前端部分是html+css+js来完成,后端部分由node.js来完成,而node其实就是js语言,node仅仅是一个平台,能够基于v8引擎运行js代码的一个平台(和google浏览器一样);

    2.权威网站
        https://stackoverflow.com/
        全球权威专业技术问答网站

        https://insghts.stackoverflow.com/survey/2016
        2016年度全世界技术发展的总结报告

        github: https://github.com/
        全世界一款非常权威的开源社区(代码托管平台),前端开发中你所知道的框架或者类库等,他们的源代码99.99999%在github中都能找到
        以后当大家有所能力后,写一些开源的类库或者插件供别人使用,如果被人用的好,你的github粉丝会越来越多,当达到一定量的时候,在国内你就寂寞了...
        现在回去后,先做一件事情: 把一些自己知道的框架都找到,然后把源代码fork到自己的仓库中;

        https://codding.net/
        中文版(国内)的github

        http://www.csdn.net/
        中国技术论坛(社区)

        https://juejin.im/
        掘金

        http://www.w3school.com.cn/
        w3school

        http://www.w3cplus.com/
        w3cplus

        http://www.qdfuns.com/
        w3cfuns(qdfuns)

        http://www.webhek.com/
        骇客

        http://www.css88.com/
        css88

        名人博客: 廖雪峰,阮一峰,张鑫旭,大漠,崔世峰....

        慕课视频

    3.全栈开发的意义
        1.现在很多项目前后端分离
            描述说明: 目前市场上有很多项目都是前后端完全分离的;后台处理自己的业务逻辑(可以使用任何的技术,客户端不关心你用什么),把客户端需要的数据内容都提供成对应的接口(接口地址);客户端(前端)通过js中的AJAX或者JSONP调取对应的接口,获取到数据即可,剩下的显示渲染都是前端的任务,和后台没有关系;

            好处:
            1.前后台人员是独立的;共同根据一个交互协议(API文档)规范开发(我们管这个协议叫API文档);同时进行开发,提供了开发效率;
            2.前端开发的内容是一个独立的站点,后台开发的内容也是一个独立的站点,项目代码是分开的;维护管理起来非常方便;
            可以使用AJAX等技术实现局部刷新,提高整个网站的个性化操作等

            弊端:
            1.使用AJAX等技术获取到数据,由js做数据绑定(字符串拼接,或ES6模板字符串,模板引擎插件...),不管使用哪种方式做数据绑定,在页面的源代码中都看不到绑定的内容,不利于网站的SEO优化;   解决方法: 不用前端数据绑定(例如: 新闻类的网站);要用后台语言去做;
            2.数据渲染是由客户端渲染的,我们先请求数据,然后再渲染数据,这样无形中延长了加载的时间;
            3.由于AJAX属于同源请求策略,所以在开发的时候需要在本地配置一个和服务器相同的环境域,这样才可以调取到服务器端的数据;


            网站的SEO优化
            SEO: 网络推广运营
                一个网站,SEO运营专员就是利用互联网的传播媒介,把公司的产品推广出去,最直接的来说,别人通过百度搜一个关键词,能不能搜到你的网站,而且你网站的位置是不是第一位;
                为啥别人在百度中搜索一个关键词能查找到你的网站?爬虫;蜘蛛;定期去每个网站抓取和收录内容,作为网站SEO优化专员,你要想尽一切方法去让爬虫多收录关键词和内容;当用户通过百度搜索查询某个关键词的时候,百度搜索引擎内部会到爬虫收录的词库中筛选,把所有匹配到的词呈现给用户;如果你的网站这个关键词收录的比别人更多,你的网站在搜索结果中位置靠前;

            作为开发者的SEO优化:
                1.设置好网站的title;(TDK   title,description,keywords);
                2.如果页面中有一个logo,我们用h1包起来,把重要的关键词写在H1中,但是在样式中把文字隐藏(指给用户看图片,文字是给蜘蛛看的);
                3.IMG标签的alt属性,写图片说明(要包含关键字);
                4.重写页面的URL(伪URL重写)
                4.除以上,我们还可以设置站点机器人,站点地图,和权重高的网站互换友链提高权重,软文推广;


            网站的SEM竞价
                公司在百度注册一个账号,在SEM竞价的后台,我们设置一些关键词,并且设置关键词的点击付费标准,基本上谁掏的钱多,谁排第一位;
                所有搜索出来的前几条中,后面带着广告的网站,都是花钱买的;


        2.非完全前后端分离的项目: 利于seo优化-且打开速度快
            前端只需要实现样式结构以及一些js效果,页面中的数据交互大部分都是后台语言来完成的(比如: hph,jsp,ruby...);这样要求前端开发还需要看懂后台的部分代码;

            好处:
            1.数据绑定是由后台处理的,在页面的源代码中,可以看到绑定的数据内容,有利于SEO优化;(在速度和优化中,腾讯选择了速度);sem(营销推广)给了快速互联网公司一些出路;
            2.数据渲染是由服务器完成的,服务器把需要的数据以及需要展示的内容都渲染完成;然后统一返回给客户端的的浏览器呈现,速度很快,类似于京东淘宝这些网站,它们的首屏内容,为了能更快的加载,一般都是服务器端来渲染(后台绑定数据-首屏交给服务器渲染-速度快),其它屏幕的再交给js请求和渲染;(其他屏js交给渲染),这样可以减轻服务器的负担;

        node.js的渲染速度比python等都快;

前后端完全分离的模型(客户端和服务器端交互的模型)
    客户端: 浏览器,能够向服务器端发送请求的都叫客户端;一般指的是浏览器;
    服务器端: 能够接收客户端请求并且把一些数据内容返回给客户端的,都是服务器端;
        举例: 我们在自己电脑的google浏览器地址栏中输入http://www.baidu.com 这样就能访问百度了,此时电脑的浏览器成为"客户端",百度产品所在的服务器就是"服务器端";

    客户端和服务器端怎样交互?
        面试题: 当我们在浏览器地址栏中输入一个网址,到最后能看到这个网址对应的页面,中间都发生了哪些事情?
            1.通过客户端输入的域名(网址),去DNS服务器上进行查找
            2.在DNS服务器上找到资源服务器的外网IP地址
            3.通过外网IP找到服务器
            4.通过客户端浏览器地址栏中输入的端口号,找到服务器上对应的服务(项目);
            5.在项目中找到,浏览器地址栏中请求的那个文件;
            6.服务器端把找到的资源文件中的"源代码"返回给客户端的浏览器;
            7.客户端浏览器按照自己的引擎(内核)开始解析和渲染这些代码,最后呈现给用户的就是一个页面;

    职业生涯建议:
        学会几个词: 开发分享(任何一个行业,你想要有更高的建树,不仅仅是自身能力很强大,而是你的影响力很强大);jiangruhong老人  徒弟: 结果导向创始人-周
        通俗来讲: 有强大的圈子,自己在圈子中占强大的位置;想要做到这一点,就要开放分享,否则没戏;比如: 写自己的博客;培养自己的文字功底;在开源社区分享自己的精华知识;当讲师;写一些小的作品(类库,组件,插件);

    如何把自己做好的网站(博客)发布出来让别人看?
        1.先购买服务器: 存储自己的项目资源文件以及一些数据内容;
            阿里云服务器,不要买合在一起的(虚拟主机: 一般都是管理员把东西配置好了,我们直接用,不灵活),建议购买独立主机(可以自己进入操作系统安装需要的环境及相关配置);购买服务器后,会给你账号和密码;
        2.把自己项目资源文件上传到服务器上;
            用FTP上传;的软件工具有花生壳,fileZilla等等;用购买的服务器账号和密码登录服务器,还会把服务器的外网IP地址给你;
            IP地址: (内网IP)当我们连接一个网络后,会自动给我们电脑分配一个标识性的IP地址,例如: 192.168.0.123;多个人连接同一个网络,大家的IP地址类似,但是也有区别;此时我们也可以说大家在同一个局域网(这个IP地址是局域网IP或者叫做内网IP地址);同一个局域网中:1.大家的IP地址类似;2.网关,子网掩码,DNS都是相同的;
            (外网IP)IP地址还有一种情况,公网IP或者叫做外网IP地址,内网IP是在同一个局域网下大家可以互相访问,但是外网IP是任何人都可以通过这个IP地址访问你的服务器;
            如何查看自己电脑的IP地址?cmd->ipconfig -all
            ping www.baidu.com
            clear
            exit
        3.购买域名: 就是给服务器的外网IP起个名字;
            去万网购买域名;(万网已经被阿里云收购了)
        4.DNS解析(域名解析)
            作用: 把域名和能访问服务器的外网IP关联在一起
            DNS服务器: 全世界公用的域名解析服务器,当我们解析一个域名后,会把解析的记录存储在DNS服务器上;
            01  zxt.com(域名)  56.134.235.46(外网IP)
        5.域名备案
            到工信部把自己的域名和服务器IP进行登记备案,让其合法,以后自己的产品中出现乱七八糟的东西会收到法律的约束
        6.创建服务
            以上都准备好,我们创建服务;创建服务的目的就是相当于招聘了几个售货员,让它们分别负责不同产品的销售,这里创建的服务会负责服务器上不同项目的管理
            根据所使用的语言不一样,创建的服务也不一样;创建服务的工具有:
                IIS: c#语言编写的产品一般使用IIS创建服务,服务器的操作系统一般都是windows server系统
                apache: PHP语言编写的产品,一般都用这个创建服务,操作系统一般是linux;
                nginx: 这个是目前市场上最受欢迎创建服务的工具;大公司的产品一般用的都是nginx;因为它可以承载更大的并发量;操作系统也是linux;
                node: 使用node.js编写的程序,可以基于node发布,操作系统也是linux;


详细知识点
    浏览器F2控制台
        Elements: html + css
        Console: 调控代码
        Souces: 当前网站请求的源文件
        Network页卡: 记录了所有客户端和服务器端请求的信息,包括资源文件的请求以及数据的请求等等;(今天重点讲)

    Network页卡(重点讲解)
        1.漏斗的那个图标: 按照交互文件的类型筛选
        2.阶梯的那个图标: 按照耗费时间节点来筛选

        1.Name: 请求的文件
        2.Status: 请求的状态
        3.Type: 请求的文件类型
        4.Initiator: 当前的文件是在**下请求的
        5.Size: 请求的大小
        6.Waterfall: 总好费时间

        1.HTTP报文信息: 所有客户端和服务端传输内容的总成叫报文;
        Headers
            General: 通用头(存储的交互基本信息)
                Request URL: 请求的地址
                请求的方式
                服务器访问的状态码
                请求所在服务器的IP地址
                缓存
            Response Headers: 响应头(服务器返回的信息在这里可以看到)
                Date: 服务器返回内容的一瞬间记录的服务器时间(注意,不是客户端收到信息的时间哦)
                Server: nginx/1.4.6   服务器是通过nginx工具处理的
                PHP语言做的
            Request Headers: 请求头

        Response
            服务器返回给客户端的主体内容都在这儿;

        重点讲的
        网站举例: http://www.zhufengpeixun.cn
        第一次客户端向服务器端发送请求,服务器端一般都会把首页面HTML文件中的源代码返回给客户端;
        客户端获取到源代码后,浏览器自上而下依次解析这些代码;
        解析过程中可能会遇到link,script,img,audio,video...标签;
        遇到这些标签,如果需要重新加载文件的,客户端会重新向服务器端发送请求;
        先到dns找外网IP,然后找服务器,找端口,找文件....在找到资源文件,最后把资源文件中的源代码返回,客户端继续渲染这些源代码;

        一个网页能正常展示在用户面前,客户端可能需要向服务器端发送很多次的请求,请求很多文件过来才可以;




        2.
















