vote投票系统

一.首页的处理
    $plan = $.Callbacks(),发布订阅模式做的,这是发布订阅的计划;
            limit = 10,: 每页展示的数量
            page = 1,: 展示的第几页
            search = "",: 搜索
            userId = 0;: 用户ID

    把这两个变量(pageNum,total)值处理一下(以下有)
        pageNum: 总页数
        total: 总数量

    1.1.获取要操作的两个元素;另外"li"是动态绑定的
        $userList: section标签
        $userItem: ul标签

        $tip: 暂时没有匹配数据;

        $headerBox = $(".headerBox"),:
        $search = $headerBox.find(".search"),:
        $searchInp = $search.find("input"),: 搜索下的元素-文本框
        $searchBtn = $search.find(".searchBtn");: 搜索按钮标签


    1.2.通过ajax获取数据,展示首页数据


    1.3.控制有数据和没数据;
        1.3.1.获取到的匹配数据
            1.4.把这两个变量((pageNum,total))值处理一下
            1.5.获取的lise,做数据绑定
        1.3.2没有获取的匹配数据


    1.6.数据绑定
        1.6.1.resultList: 从服务器获取的结果
            用箭头函数,中的this: 就不是循环的那一项了

        1.6.2.绑定数据
            <!--这句话需要做特殊处理-->


    1.7.滚动加载更多
        1.7.1.获取当前屏幕的高度,卷去的高度,真实页面的高度

        1.7.2.获取完数据之后,进行判断
            还差200px就到页面最底部了,此时我们加载更多数据


    1.8.获取文本框元素和文本框里的button
        1.8.1除了展示首页数据以外,还要展示button
            得到它里面的value值
            还回归到第一页
            1.8.2.点击搜索的时候,里面的内容先清空原有区域内容,然后再绑定最新获取的内容
            1.8.3.搜索完成之后,再执行sendAjax()展示首页数据;


    1.9.封装ajax;展示首页数据


    1.10.调试
        Network   Headers    Request URL: .......(发送给服务器的信息-对: 说明不是客户端的问题)
        (发送给服务器的信息-不对: 说明是客户端的问题)


    1.11搜索和展示做一套即可;
        区别: 传给服务器的搜索值到底有没有;
        展示时: 传递给服务器的搜索值没有;
        搜索时: 传递给服务器的搜索值有;


二.登录注册



    1.注册





    2.登录




------------------------------------------------------------------------
本地存储storage
    本地存储的重要度不下于var和let---五颗星的重要;
    storage: 本地存储;在当前网站的某一个页面,我们把信息存储起来(存储在客户端浏览器的某一个地方);当前网站的其它页面中也可以获取到这些信息;

        1.google浏览器存储的信息,IE浏览器中不能获取: 说明本地存储受浏览器限制;
        2.在京东存储的信息,在百度页面不能获取: 说明本地存储受域的限制;
        3.某些存储方式(例如cookie)受时间的限制;

        本地存储的信息再控制台Application页卡中可以看到,并且存储的信息都是明文存储;所以对于一些需要重点保护的数据,要进行加密;
            Local Storage: 本地存储  (页面关闭,存储的信息不会消失)
                1.永久存储在本地;只要自己不手动清除,就会一直存储着;
                2.存储内容量比较大,有5MB左右;
                3.暂时还不受安全卫士等清理的影响;
                4.不受无痕浏览/隐身模式的影响;
                5.不兼容IE低版本浏览器;
                用到的方法:
                1.setItem
                2.getItem
                3.removeItem
                4.clear
                ...
            Session Storage: 绘画存储  (页面关闭,存储的信息就消失了)
            IndexedDB: 本地数据库存储
            Web SQL: 本地数据库存储
            cookie:
                1.时间限制: 时间我们可以自己设置;
                2.大小限制: 存储的内容比较小,一般只有4KB;
                3.使用360,金山等安全卫士清理垃圾的时候,可能会把cookie干掉,或者使用浏览器内置的清除历史记录的时候,也可能会把cookie干掉;
                4.用户可能出于安全角度的考虑,会禁用cookie(无痕浏览,隐身模式);
                5.兼容所有浏览器(包括IE5);
                用到的方法只有一个:
                1.document.cookie
                今天的js文件夹中有个cookie.js,引用cookie方法的时候,用这个文件;

                对比Local Storage,cookie常用;


        用本地存储可以实现两个或多个页面的通信;

        都什么会用到本地存储?
            注册,登录;(验证登录态)

        实战案例:
            哪些是用本地存储来做的?
            1.验证登录状态: 我们登录或者注册成功后可以把用户的一些简单信息存储在本地,以后在网站的其它页面中,想要验证用户是否已经登录,就看本地中是否存储这些信息了,存储了就算已经登录,没存储就是没登录;

            2.购物车: 在用户未登录状态下,用户在商品页面购物一些信息,当点击加入购物车的时候,会把当前商品信息存储在本地....进入到购物车列表页面,我们在本地存储的信息中,把所有加入购物车的商品获取到;,展示在页面当中即可;目前各大电商网站在用户已经登录的情况下,加入购物车的商品信息都存储在服务器上了(为啥存在服务器上: 为了想要实现多平台信息共享);

            3.记住用户名密码:

            4.数据缓存: css/js

            ....
------------------------------------------------------------------------


关于中文乱码的问题:
    客户端->服务器端传数据的时候
    客户端->客户端之间传数据的时候

    escape("周啸天")=>编码
    unescape("");=>解码

    encodeURI("周啸天") =>编码
    decodeURI("") =>解码

    encodeURIComponent("周啸天")  =>编码
    decodeURIComponent("")  =>解码





课后作业
    1.首页[我要参赛]自己做;
    2.用户登录页中,[投他一票]自己做;

今天投票系统的案例,回家好好练;
老师录的视频,回头传百度网盘,才能看;
今天的讲义,老师传群里了;回头下载;


