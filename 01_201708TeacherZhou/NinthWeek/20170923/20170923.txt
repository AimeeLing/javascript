AJAX
    AJAX: async(asynchronous)javascript and xml异步的JS和XML

    作用: 通过技术,客户端可以向服务器端发送请求,把需要展示给用户的数据获取到,也可以把客户端用户填写的一些信息发送给服务器进行处理;=>AJAX实现的是前后端数据请求的交互;

AJAX中异步JS的概念:
    此处的异步和我们之前学习的同步异步还是有区别,这里提到的异步是"局部刷新";

        全局刷新:
            1.客户端看到的页面都是由服务器端进行渲染的,服务器把呈现的结构样式以及动态的数据都渲染完成,客户端浏览器拿到最终的代码呈现即可,客户端不需要做其它业务逻辑;

            2.如果当前页面中的部分结构和数据需要改变,需要由服务器端重新渲染,把最新渲染的结构返回给客户端;客户端通过整体刷新来展示最新的效果;

        局部刷新:
            1.局部刷新不是服务器端来渲染页面,客户端通过AJAX等技术向服务器发送请求,服务器只需要把数据返回给客户端即可,页面的渲染是由客户端来完成的;

            2.如果有一个区域的数据需要发生改变,只需要再重新发送AJAX请求,获取新的数据由客户端重新的把当前区域内容重新渲染即可;页面不需要重新加载;只把某个区域的数据刷新就可以了;


XML
    html: 超文本标记语言;
    xhtml: 更加严谨的html;
    dhtml: 页面中的部分数据是动态更新的;

    xml: 可扩展的标记语言,相对于html来说,html中的标签都是w3c规定的,而xml中的标签大部分都是自己随意设置的;


xml范例: 这就是xml的文档(存储一些数据,定义一些有意义的标签)
    <root>
        <student>
            <name>张三</name>
            <age>28</age>
            <score>
                <english>98</english>
                <chinese>99</chinese>
                <math>100</math>
            </score>
        </student>
        <student>
            <name>李四</name>
            <age>27</age>
            <score>
                <english>8</english>
                <chinese>140</chinese>
                <math>149</math>
            </score>
        </student>
    </root>
    <!--这就是xml的文档-->

xml的作用: 不在展示,而在于存储;自己扩展一些有意义的标签,按照指定的结构清晰明了的存储一些数据信息;很久之前,服务器和客户端传输的数据就是xml数据;
    在很早之前,使用AJAX实现客户端和服务器端数据交互,所采用的数据格式一般都是xml格式的,由于xml格式解析的时候不太方便,所以目前项目中都是使用json格式代替xml格式的数据传输;


客户端和服务器端数据传输的格式:
    1.json格式(一般都是json格式的字符串)
    2.xml
    3.文件流(比如: buffer,二进制,base...等编码格式的也可进行传输)
    4....

    思考:
    xml怎么解析?
    老师举例他曾经遇到的工作流引擎的开发(请假流程)用的xml...


怎么使用AJAX进行数据传输,以下了解AJAX的基础语法:
AJAX基础语法
    1.创建一个AJAX对象(xhr是AJAX对象)
        let xhr = new XMLHttpRequest;

    2.打开请求连接(配置AJAX请求的基础参数)
        xhr.open([method],[url],[sync/async],[username],[userpassword]);备注: 后两个参数不怎么用;
        xhr.open("GET","json文件目录",false);

            1.请求方式: 两大类
                get请求: get,delete,head;
                post请求: post,put
                下面详细讲解AJAX请求方式;(大知识点需细分--重要)

            1.请求的url地址:
                通过此地址可以向服务器发送不同请求,获取不同的数据;所以这个地址其实就是一个标识作用,告诉服务器端我们想获取哪些数据;真实项目中,后台开发工程师会提供给前端工程师一个API文档,在文档当中声明了获取不同数据的不同接口地址;

            3.AJAX的同步和异步请求async/sync
                xhr.onpen("get","getList")
                第三个参数不写默认是true: 异步,写false是同步;

            4.5.最后两个参数:
                用户名和密码;我们一般不设置;只有当服务器端做安全限制的时候,限定某些用户才可以访问服务器,此时我们需要提供安全验证的用户名和密码;

    3.监听状态请求获取需要的数据
        xhr.onreadystatechange=function(){//=>备注: 把绑定的方法执行
            xhr.readyState: ajax状态码  0-4
            xhr.status: HTTP网络状态码

            //->得到的数据1
            xhr.responseText: 获取服务器端返回的字符串数据;而一般都是json字符串;

            //->得到的数据2
            xhr.responseXML: 获取服务器端返回的XML格式数据

            //->得到的数据还有更多....

            readystatechange: 当AJAX状态发生改变会触发这个事件;
            xhr.readyState: 记录各种状态码;0  1  2  3  4;
                0: UNSENT(未发送);创建一个ajax实例,默认状态是0;
                1: OPENED(已打开);执行xhr.open后,状态是1;
                2: HEADER_RECEIVED(客户端已经获取到服务器端返回的响应头信息);
                3: LOADING(服务器返回的响应主体内容正在传输中);
                4: DONE(客户端已经接收到服务器返回的响应主体内容),代表当前请求完成;

                服务器端在交互的时候会把一些数据返回给客户端;而返回给客户端的数据分为两种:
                    1.通过响应头返回;
                    2.通过响应主体返回;

                    响应头:
                        Network页卡,随便找个文件;
                            打开Headers页卡;
                                Response Headers响应头;(状态为2;响应头先返回来)
                                    Content-Type: text/html;charset=utf-8
                                    Date........(服务器返回给客户端数据的时候,记录的服务器时间);

                        获取响应头信息有两个方法:
                            1.xhr.getAllResponseHeaders: 获取所有的;
                            2.xhr.getResponseHeader: 获取指定信息名的;

                    响应主体:
                        Network页卡,随便找个文件;
                            打开Response页卡;
                                这里的是响应主体;
                                Response Headers响应头;(状态为4,响应主体后返回来)


                客户端向服务器端发送请求的时候,有时候也需要把一些信息传递给服务器端,而传递给服务器端有以下几种方式:
                    1.通过设置请求头把信息传递给服务器(分**和自定义请求头);
                    2.通过请求主体把信息传递给服务器端;
                    3.通过请求地址后面问号传递参数的方式把信息传递给服务器端;

                    请求头:
                        setRequestHeader: 设置请求头信息;
                        abort: 中断请求

                    请求主体:


                    问号传参:


            ontimeout: xhr.timeout(设置请求的超时时间);当前请求如果超过了这个时间还没有请求完成,属于超时,请求中断;同时也会触发xhr.ontimeout这个事件;

        };

    4.发送AJAX请求: 传递的内容可以是null,也可以是其它信息;(后边再讲其它信息是啥)
        xhr.send(null/内容);



AJAX请求方式
    客户端向服务器端发送请求的时候有很多的请求方式,最常用:
        1.get系列: 有get,delete,head;
        2.post系列: 有post,put;


    get和post的简单区别:
        get系列:
            目的: 一般都是从服务器端获取数据;例如: 获取一些数据信息展示在页面中;
            delete: 删除,从服务器上删除某些资源(如果要删除,就只用delete请求就可以)
            head: 只从服务器上获取响应头信息,此请求无法获取响应主体信息(如果说以后只获得响应头,不需要响应主体,用head请求就可以);
        post系列:
            目的: 一般都是把客户端的一些数据推送给服务器端;例如: 用户注册;客户端需要把用户填写的数据获取到,发送给服务器;
            put: 存放,把一些资源存放在服务器上;

        无论那种系列都可以从客户端向服务器端发送信息;也可以从服务器端向客户端获取数据;只是get给的少拿的多;post给的多拿的少;


    get和pust在编程上本质上的一些区别:

        1.传递方式
            1.get请求方式传递个服务器端的数据信息,采用的是url问号传参的方式来完成的;

                代码如下:
                    xhr.open("get","getInfo?name=zxt&age=27&sex=0")     sex=0(性别:男)

            2.post请求方式传递给服务器端的数据信息,采用的是请求主体传送的方式来完成的;

                代码如下:
                    xhr.send("name=zxt&age=27&sex=0")       send中存放的就是请求主体内容;如果不需要请求主体,写null;=>xhr.send(null)
                    真正项目中用的是这种方式;

        2.传递大小
            1.get请求传递给服务器的内容有长度的限制;
            2.post没有长度限制;

            get是问号传参传递的,如果传递的内容过多,会导致url太长;
            浏览器对于url地址有一个长度限制;google一般限制在8kb左右;火狐7kb左右;IE限制在2kb;超过限制,浏览器会把超出的部分截取掉(传递给服务器的内容就不完整了);


            post是通过请求主体传递的;请求主体没有大小限制;所以post没有长度限制;但是真实项目中为了保证传输速度,我们会人为的控制"传输内容大小";

        3.缓存问题
            1.get请求传递给服务器的内容有缓存;这个缓存是不可控的;
            2.post请求不会产生缓存;

            因为get请求是问号传参传递给服务器的内容;请一次通过地址传递某些参数给服务器,获取到一些最新的数据,第二次如果传递给服务器的参数没有变,很可能从服务器端获取的数据还是和上一次一样,不会获取到最新的数据;

            xhr.open("get","/getNewInfo?type=a");  两次请求的方式都相同,对于这种数据不能用缓存;清缓存的方式: 手动在请求的url地址末尾追加一个随机数,保证每一次请求的地址都不完全一样即可;
            xhr.open("get","/getNewInfo?type=a&_="+Math.random());

        4.安全问题
            get请求没有post请求安全;

            因为get请求是问号传参的方式;很多时候,别人可以通过黑客技术,劫持我们发送的url请求;如果是问号传递参数,传递给服务器的信息就会被劫持掉,或者恶意篡改;
            post是通过请求主体传递服务器的;也可以被劫持,就是太复杂,一般人不会这个技术;就一些人会这种技术,也不会这么干(付出的精力和成本太大);

            服务器端和客户端的请求,一般所有涉及到安全性的信息请求,我们都使用post请求;例如: 所有涉及账号密码的都应该使用post传输;

            在IE互联网面前,没有绝对的安全;


        以上都是约定俗称的区别;但是,从官方讲get和post没有区别;get请求不一定只通过问号传参;也可以通过请求主体传参;post请求也可以通过问号传参;



HTTP网路状态码(AJAX基础知识)
    通过一些标识数字反应出当前服务器的处理状态;这就是HTTP网路状态码,接下来学一些数字代表什么意思:
        百度搜(HTTP状态码);
        分为1开头的: 一般很少遇到;
        分为2开头的: 成功;基本上只能遇到200;
            200: 成功;一切正常;正常发送请求,服务器也正常把信息返回;
            以2开头的都是成功;

        分为3开头的: 慢性成功;常用的有301,302,303,304,307;
            301: Moved Permanently(永久转移/永久重定向);
            302: 1.Move temporarily(临时转移/临时重定向);2.服务器的负载均衡的时候,也用302(一般大公司的图片都会做302);
            303: ;
            304: Not Modified(读取的是缓存中的数据);css/js不经常变(可能几个月升级才会变),第1次请求是200,客和服之间建立可控机制做304存储,以后再请求直接读缓存;
                不经常改变的文件,做个304缓存;
            307: Temporary Redirect(临时重定向--这是新加的);

            什么叫永久转移,什么叫临时转移?
                http://www.360buy.com  ->http://www.jd.com     301(永久转移动)

            3开头的也代表成功,没有2开头的成功的那么干脆而已;

        分为4开头的: 客户端错误;400,401,404;
            400: Bad Request(请求参数错误);--常用的;   没有证件,无法出示,参数不对;    有证件,是错误,权限不够,参数不对;
            401: Unauthorized(请求参数不够);
            404: Not Found(请求地址不存在)--常用的;     根本没有门,地址不对;

        分为5开头的: 服务器端错误;500,503;
            500: Internal Server Error(未知的服务器错误);可能服务器卡死,宕机...
            503: Service Unavailable(服务器超负荷请求);只能处理1000个人,第1001人来请求就是超负荷请求...
        分为6开头的: 很少见;




创建AJAX对象,看视频:
    第八章
        第八周： Ajax/JSONP/Node基础及项目实战开发
            第2节： AJAX基础知识
                课件3 : AJAX兼容处理及惰性思想























