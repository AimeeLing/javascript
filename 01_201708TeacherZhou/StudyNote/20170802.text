罚抄:
    Array中常用的方法:
        push: 作用和意义
        参数:
        返回值:
        原有数组是否改变:
    String:
        substr: 作用
        参数:
        返回值:
    Math:
    DOM:
        获取元素的方法以及作用
        节点之间关系的属性
        增删改DOM的方法
    Date
    数据类型转换

    罚抄完成,再次抽查提问,不会?继续抄;
    ------------------------------------------------------------------------------------------------
一.

function Fn(num){
    this.x = this.y = num;
}
Fn.prototype = {
    x: 20,
    sum: function(){
        console.log(this.x + this.y);
    }
};
var f = new Fn(10);
console.log(f.sum === Fn.prototype.sum);//->true
f.sum();//->
Fn.prototype.sum();//->
console.log(f.constructor);//->

//->当Fn.prototype指向改变后,当前堆内存不被占用,浏览器会把它销毁;

总结的一些规律:
//->1.instanceof: 检测实例是否属于这个类
    规律: 只要是在当前实例原型链上出现的类,使用instanceof检测的时候,出现的结果都是true;
        f instanceof Fn;//->true
        f instanceof Object;//->true
//->2.每一个类的原型都应该拥有一个constructor属性,这个属性存储的值就是当前函数本身;但是如果我们把prototype的值重新执行一个新的堆内存(自己手动创建的对象),类的原型就会失去constructor这个属性;所以在以后开发的时候,如果我们想批量给原型设置属性和方法,需要注意constructor,防止覆盖;
    举例:
        ~function(){
            var jQuery = function(){
                //...
            };
            //->让jQuery这个类的原型重新指向了新的堆内存,这样jQuery的constructor属性就被覆盖了,这样不好,我们需要自己手动的增加constructor属性
            jQuery.prototype = {
                constructor: jQuery,
                ...
            };


            window.jQuery = window.$ = jQuery;
        }();

具体的业务开发//->单利模式
类库的封装: 封装轮播图,封装插件,封装选项卡//->构造原型模式
基于构造原型模式扩展出的call,apply,bind
Object原型上:
    1.hasOwnProperty
    2.toString
    3.isprototypeOf
    4.propertyIsEnumerable枚举

-------------------------------------以上: 原型的皮毛-------------------------------------------
函数的三种角色(三种角色之间没有必然关系!!!(谨记))
    1.普通函数
        //->1.私有作用域,形参赋值,变量提升,代码执行,返回值,arguments,栈内存的销毁不销毁,作用域链....作为普通函数,我们要掌握的东西!!!
    2.类
        //->实例,类,instanceof,constructor,prototype,__proto__,原型链....作为类,讲过的构造原型,我们要掌握的东西!!!
    3.普通对象
        //->1.就把它当作一个普通的obj即可,有自己的属性名和属性值...
            //->name: "函数名"
            //->length: 形参的个数
            //->prototype
            //->__proto__
            //->....

            function Fn(num){
                var num = 100;
                this.x = this.y = num;
            }
            Fn.prototype = {
                constructor: Fn,
                x: 20,
                sum: function(){
                    var res = this.x + this.y;
                    console.log(res);
                }
            };
            var f = new Fn(10);

    图片1.1.png解析:
    1.Object.__proto__.__proto__ === Object.prototype;//->true
    2.Function.prototype === Function.__proto__;//->true
    3.Function.call()和Function.prototype.call区别?答: call方法中的this是不相同的,第一个是Function,第二个是它的原型;
    4.Object instanceof Object;//->true
      ...
      ]
------------------------------以上: 原型链就到此结束-----------------------------------------------------
call/apply/bind
    //->属于Function.prototype上定义的三个方法,所有的函数数据类型值都可以调取这三个方法;
    //->三个方法都是用来改变一个函数中的this关键字指向的(bind不兼容ie6-8,其余两个方法兼容所有的浏览器);
    三个方法的作用和区别
        1.



问题:
1.链式写法???    ary.splice().pop().call()......

