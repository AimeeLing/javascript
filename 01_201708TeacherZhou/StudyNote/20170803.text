一.把类数组转化为数组
    function fn(){
        //->arguments: 类数组
        方法一:
        var ary = Array.prototype.slice.call(arguments);

        方法二:
        var ary = [].slice.call(arguments);
    }
    fn(12,23,34);

    1)把类数组转化为数组原理:
        借用slice内置代码的原理(循环的过程),里面的this指向arguments,这样就相当于在操作arguments这个类数组(arguments是类数组,它的结构和数组太相似了,数组的一些循环遍历操作,也同样适用于类数组);
        借用数组里基本常用的方法,都能借用;
    2)在js中,元素集合("HTMLCollection"的实例)以及节点集合("NodeList"的实例)也都是类数组;
    3)这些类数组也可以借用数组原型的方法,实现一些相关的操作,例如: 借用slice把类数组转换成数组;
        var allTagList = document.getElementsByName("*");//->* 通配符: 获取当前页面中所有的元素标签
        var ary = Array.prototype.slice(allTagList);
        console.log(ary instanceof Array, ary);//->true 数组[]
    4)在IE低版本浏览器(IE6-8)中运行,我们发现ARG这个类数组是可以借用数组的方法正常操作的;
        但是元素集合和节点集合的类数组,无法借用数组原型上的方法,提示: Array.prototype.slice: "this"不是JavaScript对象 的错误;
        (IE6-8)的机制: 浏览器(IE6-8)把元素集合和节点集合当作静态的类来玩的;
    5)所以在IE低版本中,我们把节点或者元素集合转换为数组的时候,就不能偷懒了;
        var oList = document.getElementsByTagName("li");
        //->IE6-8
        var ary = [];
        for(var i = 0;i < oList.length;i++){
            ary[ary.length] = oList[i];
        }
        console.log(ary);//->存储的值是: 得到的最终结果
    综上5个所述,如果我们想实现一个方法"能把类数组转换为数组的的方法",我们需要考虑的事情:
        1.兼容借用数组"[].slice.call([类数组])"这种模式的,我们使用这种模式,不能兼容的浏览器,我们使用"循环"一步步处理;
        2.如何验证是否兼容"[].slice.call([类数组])"这种模式: 不兼容的情况下,浏览器会抛出异常(报错),换句话说,只要报错了就是不兼容;

    延伸出新知识--浏览器异常信息捕获
二.浏览器异常信息捕获"try catch finally"
    try{
        //->存放的JS代码
    }catch(e){
        //->e(error): 是一个形参(名字可以随便起,但是必须写形参,不写语法报错)   e.message(存储的是当前JS代码执行的报错信息)
        //->TRY中的JS代码执行,如果出现错误,会进入到catch中(没出错不进入这里);
    }finally{
        //->不管JS代码执行是否报错,最后都会执行finally中的内容(项目中不常用)
    }

    使用try...catch的作用:
        1.可以捕获到错误信息的同时,防止浏览器抛出异常信息,这样即使当前代码报错了,也不会影响下面的执行;
        2.可以监听到报错,我们可以利用这个机制,做一些兼容处理: 把需要执行的代码放在try中,如果不兼容报错了,我们再catch中处理兼容即可;
        什么时候使用try...catch? 前提是有报错时使用;
        // console.log(a);//->Uncaught ReferenceError: a is not defined
        // var b = 13;
        // console.log(b);
        //上面代码报错,下面代码不执行

        //实现:上面代码报错,下面代码也能执行--------------------------------------
        try{
            console.log(a);
        }catch(e){
            console.log(e.message);//->报错信息
        }
        var b = 13;
        console.log(b);//->13

三.JSON
    1)它不是一个新的数据类型,它知识某种特殊的数据格式"把属性名用双引号抱起来"的格式的数据"(JSON格式的对象/JSON格式的字符串)",JSON格式没啥特殊的,操作起来和对象以及字符串一样;

        1.JSON对象
        var obj = {name: "珠峰",age: 8};
        var jsonObj = {"name": "珠峰","age": 8};//->JSON对象

        2.JSON字符串
        var str = "{name: '珠峰'}";
        var jsonStr = '{"name": '珠峰',"age": 8}';//->JSON字符串

    2)在前后端数据交互中,服务器端返回给客户端的数据一般都是JSON格式的数据,也就是JSON的作用: 承载服务器端和客户端的数据交互;

    3)JSON的方法(俩方法)
        1方法.JSON.parse: 全称window.JSON.parse;
            在全局对象中存在一个JSON对象,这个对象中有一个parse方法;方法的作用: 把JSON格式的字符串转化为JSON格式的对象;
            var str = '[{"id": 1,"name":"珠峰"}, {"id": 2,"name": "周啸天"}]';

            var jsonData = JSON.parse(str);
            console.log(jsonData);//->JSON对象

            //->意义: 服务器端返回给客户端的一般都是JSON字符串,我们操作里面属性和属性值的时候不好操作,此时我们需要先把这个字符串变为对象才可以;

        2方法.JSON.stringify
            把JSON格式的对象(普通格式的也可以)转化为JSON格式的字符串;
            var ary = [{
                id: 1,
                name: '珠峰'
            },{
                id: 2,
                name: '周啸天'
            }];

            var jsonStr = JSON.stringify(ary);//->JSON格式的字符串

            //->意义: 有些时候,客户端不仅仅向服务器发请求,还会给服务器传递点内容(例如: 注册的时候,需要客户端把用户输入的内容传递给服务器),客户端传递给服务器的一般都是JSON格式的字符串,此时就需要我们使用stringify这个方法把得到的结果变为字符串,再传递给服务器;

    4)在IE6-7中,window下没有JSON这个对象,也就是不能使用"JSON.parse"和"JSON.stringify"这俩方法;
        用啥可以兼容IE6-7呢?
        1.JSON.parse被"eval"取代了;
            eval('('+str+')');//->手动给需要解析的字符串外层包裹一个小括号,防止解析出错;为啥要包小括号???对于'{...}'这种格式的字符串,如果外层不多加一层小括号,解析出来,属于语法不符合;

        综上所述,我们现在有一个需求: 编写一个方法,能够实现把JSON字符串转化为JSON对象:
            1.兼容: 用JSON.parse;
            2.不兼容: 用eval;
            3.如果window中存在JSON这个属性,属于兼容,反之步兼容;(备注: JSON是window的对象)

        封装把"JSON字符串格式"转化为"JSON对象格式",兼容标准浏览器和IE6-7;
            //->toJSON: converts a string into a object (把JSON字符串转化为对象)
                function toJSON(str) {
                    //->传一个字符串过来,最终转化成对象;
                    return "JSON" in window ? JSON.parse(str) : eval('('+str+')');
                }

        2.JSON.stringify没有能取代的方法,需要自己编写复杂的处理程序(思考题);提示: 会用到递归;



四.AJAX
    异步的JS和XML: AJAX(async javascript and xml);
    AJAX的作用: 我们可以通过AJAX向服务器发送请求,并且获取到服务器返回的内容;
        //->1.创建一个AJAX对象
            var xhr = new XMLHttpRequest;
        //->2.打开一个请求的URL的地址
            xhr.open([请求方式],[请求的URL地址],[同步或者异步]);
                举例: xhr.open("GET","xxx/xxx.json",false)         从今天到第9周之前用的都是"GET"
                false代表的是同步编程: 当从服务器端把数据获取到之后,才可以做别的事情

        //->3.监听AJAX的状态改变,接收服务器返回的结果;
            xhr.onreadystatechange = function (){
                if(xhr.readyState === 4 && xhr.status === 200){
                    //->从服务器获取数据成功,下面的操作就可以接收到服务器端返回的结果
                    xhr.responseText;
                }
            };
        //->4.向服务器端发送请求
            xhr.send(null);//->因为get请求是没有请求体的所以为null

    AJAX的格式:(汇总以上)
        var xhr = new XMLHttpRequest;
            xhr.open("GET","json/temp.json",false);
            xhr.onreadystatechange = function (){
                if(xhr.readyState === 4 && xhr.status === 200){
                    //console.log(xhr.responseText);
                    var res = xhr.responseText;
                    console.log(utils.toJSON(res));
                }
            };
            xhr.send(null);


五.表格排序案例


六.思考题:
    1."2.JSON.stringify没有能取代的方法,需要自己编写复杂的处理程序(思考题);"
        提示: 跟数据的深度克隆相似;

    2.看视频
        第二周(第1节)
            课件10: 数据绑定及DOM回流
            课件11: 表格排序及DOM映射

        第二周(第2节)
            1.表格排序相关视频都看一遍;
            2.开始预习正则(*正则教材元字符列表背下来*)


